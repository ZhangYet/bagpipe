<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on 一派胡言</title>
    <link>/categories/code/</link>
    <description>Recent content in code on 一派胡言</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 01 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="/categories/code/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ebpf 札记(5): bpftrace cgroup_path 无法用作 map key</title>
      <link>/posts/ebpf-notes-05/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/ebpf-notes-05/</guid>
      <description>背景 bpftrace 的函数 cgroup_path 接受 cgroup id ，返回一个表示 cgroup path 的字符串。 我们很容易觉得它应该可以用做 bpftrace 里面的 map key ，所以不久前社区有一个 issue 要求支持 cgroup_path 作为 map key。 结论 为这个 issue</description>
    </item>
    
    <item>
      <title>ebpf 札记(4): 用 ebpf 侦测函数内部的状态</title>
      <link>/posts/ebpf-notes-04/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/ebpf-notes-04/</guid>
      <description>Introduction 为了行文方便，probe 这个词我就翻译为侦测了。 使用 ebpf 可以很方便地获取被侦测函数的入参（当然大于6个的时候还是有麻烦）和返回值。但如果我们需要获知函</description>
    </item>
    
    <item>
      <title>ebpf 札记(3): 一个跟踪 kernel I/O request 生命周期的脚本</title>
      <link>/posts/ebpf-notes-03/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/ebpf-notes-03/</guid>
      <description>上周睡眠一直有问题，没有继续看 samples 里面的代码。写点别的来充数。 现在在追踪 kernel I/O request ，一个 request 被创建出来之后，会在多个函数中传递，直到被释放。 这个过程中它被那些</description>
    </item>
    
    <item>
      <title>ebpf 札记(2): samples/bpf/cpustat(WIP)</title>
      <link>/posts/ebpf-notes-02/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/ebpf-notes-02/</guid>
      <description>linux kernel 源代码下提供了 samples/bpf ，这个目录下有种类繁多的 ebpf 示例，足以作为学习者入门的好教材。 编译 在 samples/bpf/Makefile 中有详细的编译过程。如果缺乏头文件，先执行 make headers_install. 值得注意的是，如</description>
    </item>
    
    <item>
      <title>ebpf 札记(1): bpf_types.h</title>
      <link>/posts/ebpf-notes-01/</link>
      <pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/ebpf-notes-01/</guid>
      <description>本文以 5.15 版本内核为例。 概述 include/linux/bpf_types.h 这个头文件有且仅有三种宏指令： BPF_PROG_TYPE; BPF_MAP_TYPE; BPF_LINK_TYPE; 以 BPF_PROG_TYPE 为例，查找它的定义，发现它出现在 include/linux/bpf.h; kernel/bpf/btf.h; kernel/bpf/syscall.c; kernel/bpf/verifier.c; bpf.h 这个文件里面定义了一系列的 bpf_prog_ops, bpf_verifier_ops 和 bpf_map_ops: #define BPF_PROG_TYPE(_id, _name,</description>
    </item>
    
    <item>
      <title>debian 包的依赖问题</title>
      <link>/posts/debian-package-dependency/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/debian-package-dependency/</guid>
      <description>背景 最近我要把 Ubuntu 社区的 bpftrace 包迁移到公司内部发版，所以我从社区将 bpftrace 的源代码1挪到公司内部的 gitlab 开始自己打包。 目前公司使用的主流 Linux 发行版本是 Ubuntu 20.04，所以</description>
    </item>
    
  </channel>
</rss>
