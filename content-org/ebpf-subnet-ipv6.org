#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: en/posts
#+hugo_auto_set_lastmod: t
#+hugo_tags: ebpf kernel
#+hugo_categories: code 
#+hugo_draft: true
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :show_comments true
:END:
#+description: Use ebpf to summerize network thoughput on ipv6. 
#+author: Dantezy
#+date: 2022-12-20
#+TITLE: Summerize network thoughput by ebpf
* Problem
We have servers on differnt zones, which have differnt subnets. We want to use [[https://github.com/cloudflare/ebpf_exporter][ebpf_exporter]][fn:3] to monitor network thoughput from subnet1 to subnet2.
So I need to write some [[https://github.com/iovisor/bcc][bcc]] scripts.

Some tcp thoughput is sending from subnet1 to subnet2 by ipv6. But the servers haven't got ture ipv6 address, they have ipv4 addresses embedded into ipv6[fn:1].
#+CAPTION: A manual exmaple for ipv4 address embedded into ipv6
#+BEGIN_EXAMPLE
::ffff:192.168.9.255
#+END_EXAMPLE

I have two missions:

1. filter and summerize the thoughput by subnets.
2. get the ipv4 address from the ipv6 then filter and summerize by subnets.
* Development
** Copy and paste stage
epbf itself is very simple[fn:2]. To use it is difficult. The difficulty is that you have know about the probe in the kernel.
The most important problem is where to probe.

The [[https://github.com/iovisor/bcc/tree/master/tools][bcc/tools]] are good example for learning(ok, it's copy-and-paste). 

[[https://github.com/iovisor/bcc/blob/master/tools/tcpsubnet.py][tcpsubnet]] and [[https://github.com/iovisor/bcc/blob/master/tools/tcptop.py][tcptop]] are the most useful exmaples. From these two scripts, I know that:

1. we need to attach kprobes to ~tcp_sendmsg~ and ~tcp_cleanup_rbuf~.
2. we can get the ip info from ~struct sock~.

The ipv4 mission is easy.

#+BEGIN_SRC yaml
programs:
  - name: container-tcptop-by-subnet
    metrics:
      counters:
        - name: ipv4_send_bytes_by_subnet
          help: Summarize TCP send throughput by subnet.
          table: ipv4_send_bytes
          labels:
            - name: subnet
              size: 32
              decoders:
                - name: string
        - name: ipv4_recv_bytes_by_subnet
          help: Summarize TCP recv throughput by subnet.
          table: ipv4_recv_bytes
          labels:
            - name: subnet
              size: 32
              decoders:
                - name: string
    kprobes:
      tcp_sendmsg: tcp_sendmsg
      tcp_cleanup_rbuf: tcp_cleanup_rbuf
    code: |
      #include <linux/nsproxy.h>
      #include <linux/mount.h>
      #include <linux/ns_common.h>
      #include <uapi/linux/ptrace.h>
      #include <net/sock.h>
      #include <bcc/proto.h>
      #define CONTAINER_ID_LEN 128
      #define TARGET_IP_SUBNET 0xA90A // 10.169.0.0/16
      #define TARGET_MASK  0xFFFF // 16
      #define TARGET_IP_SUBNET_TAG "10.169.0.0/16" 
      struct subnet_key {
          char subnet[32];
      };
      BPF_HASH(ipv4_send_bytes, struct subnet_key);
      BPF_HASH(ipv4_recv_bytes, struct subnet_key);

      int tcp_sendmsg(struct pt_regs *ctx, struct sock *sk,
          struct msghdr *msg, size_t size)
      {
          u32 pid = bpf_get_current_pid_tgid() >> 32;
          u16 family = sk->__sk_common.skc_family;

          if (family == AF_INET) {
              u32 dst = sk->__sk_common.skc_daddr;
              if ((TARGET_IP_SUBNET & TARGET_MASK) == (dst & TARGET_MASK)) {
                struct subnet_key skey = {.subnet = TARGET_IP_SUBNET_TAG};
                ipv4_send_bytes.increment(skey, size);
              } 
          }
          // else drop
          return 0;
      }

      int tcp_cleanup_rbuf(struct pt_regs *ctx, struct sock *sk, int copied)
      {
          u32 pid = bpf_get_current_pid_tgid() >> 32;
          u16 family = sk->__sk_common.skc_family;
          u64 *val, zero = 0;
          if (copied <= 0)
              return 0;
          if (family == AF_INET) {
              u32 src = sk->__sk_common.skc_addr;
              if ((TARGET_IP_SUBNET & TARGET_MASK) == (src & TARGET_MASK)) {
                struct subnet_key skey = {.subnet = TARGET_IP_SUBNET_TAG};
                ipv4_recv_bytes.increment(skey, copied);
              }
          }
          // else drop
          return 0;
      }

#+END_SRC
** Write a bpftrace script
check 6635e16f for detail
** Debug

* Footnotes

[fn:3] The ebpf_exporter 2.0 has been migrated from BCC to libbpf, see [[https://github.com/cloudflare/ebpf_exporter/releases/tag/v2.0.0][the release note of ebpf_exporter 2.0]].
 
[fn:2] See [[https://man7.org/linux/man-pages/man2/bpf.2.html][the man page of bpf()]], only six commands for the ~bpf()~ syscall. I'm going to write another blog to analyse the source code of ~bpf()~.

[fn:1] I don't know why. 
